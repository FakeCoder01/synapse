# synapse_interfaces/RetrieveRelevantMemories.srv
# Retrieves the most relevant conversational memories from the Cognitive Core's
# vector database, optionally filtered by person, role, tags, time range, and
# conversation/channel context.
#
# Typical usage:
# - Provide query_text to be embedded by the server OR provide query_embedding directly.
# - Provide person_id to restrict results to a specific person (empty = no restriction).
# - Set top_k and min_score to control result count and thresholding.
#
# Notes:
# - Scores are normalized to [0.0, 1.0], where higher is more relevant.
# - tags_csv in the response is a comma-separated list of tags for each memory entry
#   (to avoid multi-dimensional arrays which are not supported in ROS messages).
#
# Request
string person_id                 # Optional: restrict to a specific known person (empty for any)
string query_text                # Natural-language query text; ignored if query_embedding is provided
float32[] query_embedding        # Optional: precomputed embedding for query_text
string embedding_model           # Optional: name/id of the embedding model to use (e.g., "all-MiniLM-L6-v2")

uint32 top_k                     # Number of results to return (server may cap)
float32 min_score                # Minimum relevance score [0.0..1.0] to include in results

string[] include_roles           # Optional: filter by roles (e.g., ["user","robot"]); empty = any
string[] include_tags            # Optional: results must include at least one of these tags; empty = any

builtin_interfaces/Time after_time   # Optional: only include memories after this time (zero = unset)
builtin_interfaces/Time before_time  # Optional: only include memories before this time (zero = unset)

string conversation_id           # Optional: restrict results to a specific conversation/thread
string channel                   # Optional: restrict to a specific channel (e.g., "voice","text","app")
---
# Response
bool success
string message
uint32 returned_k                # Number of results actually returned

# Parallel arrays; index-aligned across all fields below
string[] memory_ids              # Persistent IDs for memory entries
string[] person_ids              # Person IDs associated with each entry (may be empty for ambient memories)
string[] conversation_ids        # Conversation/thread IDs
string[] roles                   # "user", "robot", etc.
string[] channels                # "voice", "text", etc.
string[] texts                   # Raw utterance text
string[] tags_csv                # Comma-separated tags for each entry

builtin_interfaces/Time[] timestamps  # Timestamps of each memory entry
float32[] scores                # Relevance scores [0.0..1.0], higher is better
